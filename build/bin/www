#!/usr/bin/env node


/**
 * disable babel cache
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _routesControllersSuggestionsControllerJs = require("../routes/controllers/suggestionsController.js");

var _routesControllersSuggestionsControllerJs2 = _interopRequireDefault(_routesControllersSuggestionsControllerJs);

process.env.BABEL_DISABLE_CACHE = 1;

/**
 * Module dependencies.
 */

var app = require('../app.js');
var debug = require('debug')('node-boilerplate:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = process.env.OPENSHIFT_NODEJS_PORT || 8080;
var ipAddress = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1';
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Add socket integration to runtime
*/

var io = require("socket.io")(server, {
  'transports': ["websocket"]
});

io.on("connection", function (socket) {
  var cookiesArr = socket.client.request.headers.cookie.split(";");
  var cookies = {};
  var connections = 0;
  var controllers = {};
  cookiesArr.forEach(function (cookie) {
    var funArr = cookie.split("=");
    var key = funArr[0].replace(" ", "");
    if (key === "displayName") {
      return cookies[key] = decodeURIComponent(funArr[1]);
    }
    return cookies[key] = funArr[1];
  });
  //TODO: use cookies and input them into suggestionsController, then, upon function completion, send data to client and perform post
  connections++;
  socket.emit("connected", { connected: true });
  console.log("a user connected!");
  socket.on("disconnect", function (socket) {
    if (controllers.hasOwnProperty(socket.id)) {
      clearTimeout(controllers[socket.id]);
    }
    connections--;
    if (connections === 0) {
      clearInterval(yolo);
    }
    console.log("disconnected!");
  });
  socket.on("time", function (socket) {
    console.log("recieved response!");
  });
  socket.on("name", function (data) {
    cookies.params = {};
    cookies.params.summoner = data.name;
    var callback = function callback(data) {
      return socket.emit("data", { data: data });
    };
    controllers[socket.id] = setTimeout(function () {
      (0, _routesControllersSuggestionsControllerJs2['default'])(cookies, socket, callback);
    }, 0);
  });
  var yolo = setInterval(function () {
    socket.emit("time", { time: new Date().toTimeString() });
    console.log("sent time");
  }, 1000);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, ipAddress);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

exports['default'] = server;
module.exports = exports['default'];