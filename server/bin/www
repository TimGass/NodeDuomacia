#!/usr/bin/env node

/**
 * disable babel cache
 */
process.env.BABEL_DISABLE_CACHE = 1;

/**
 * Module dependencies.
 */

var app = require('../app.js');
var debug = require('debug')('node-boilerplate:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = process.env.OPENSHIFT_NODEJS_PORT || 8080;
var ipAddress = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1';
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Add socket integration to runtime
*/

let io = require("socket.io")(server, {
  'transports': ["websocket"]
});

import suggestionsController from "../routes/controllers/suggestionsController.js";

io.on("connection", (socket) => {
  let cookiesArr = socket.client.request.headers.cookie.split(";");
  let cookies = {};
  let connections = 0;
  let controllers = {};
  cookiesArr.forEach((cookie) => {
    let funArr = cookie.split("=");
    let key = funArr[0].replace(" ", "");
    if(key === "displayName"){
      return cookies[key] = decodeURIComponent(funArr[1]);
    }
    return cookies[key] = funArr[1];
  });
  //TODO: use cookies and input them into suggestionsController, then, upon function completion, send data to client and perform post
  connections++;
  socket.emit("connected", { connected: true });
  console.log("a user connected!");
  socket.on("disconnect", (socket) => {
    if(controllers.hasOwnProperty(socket.id)){
      clearTimeout(controllers[socket.id]);
    }
    connections--;
    if(connections === 0){
      clearInterval(yolo);
    }
    console.log("disconnected!");
  });
  socket.on("time", (socket) => {
    console.log("recieved response!");
  });
  socket.on("name", (data) => {
    cookies.params = {};
    cookies.params.summoner = data.name;
    let callback = (data) => {
      return socket.emit("data", { data: data });
    };
    controllers[socket.id] = setTimeout(() => { suggestionsController(cookies, socket, callback) }, 0);
  });
  let yolo = setInterval(() => {
    socket.emit("time", { time: new Date().toTimeString() });
    console.log("sent time");
  }, 1000);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, ipAddress);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

export default server;
